# Use the official dbt Docker image as a parent image
ARG py_version=3.11.2
FROM python:$py_version-slim-bullseye as base
# Update system packages and install necessary dependencies
RUN apt-get update \
  && apt-get dist-upgrade -y \
  && apt-get install -y --no-install-recommends \
   build-essential=12.9 \
   ca-certificates=20210119 \
   git=1:2.30.2-1+deb11u2 \
   libpq-dev \
   make=4.3-4.1 \
   openssh-client=1:8.4p1-5+deb11u3 \
   software-properties-common=0.96.20.2-2.1 \
  && apt-get clean \
  && rm -rf \
   /var/lib/apt/lists/* \
   /tmp/* \
   /var/tmp/*
# Set environment variables
ENV PYTHONIOENCODING=utf-8
ENV LANG=C.UTF-8
# Upgrade pip, setuptools, and wheel
RUN python -m pip install --upgrade "pip==24.0" "setuptools==69.2.0" "wheel==0.43.0" --no-cache-dir
# Install dbt-core and run the necessary commands
FROM base as dbt-core
RUN mkdir -p /usr/app/dbt
# Set the working directory
WORKDIR /usr/app/dbt/
# Install dbt-core
RUN python -m pip install --no-cache-dir "dbt-core==1.8.0"
# Install dbt-duckdb for working with DuckDB
#RUN python -m pip install --no-cache-dir "dbt-duckdb==1.8.3"
# Copy the entire project directory into the container
#COPY . /usr/app/dbt
# Copy dbt_project.yml into the container
#COPY dbt_project.yml /usr/app/dbt/
# Run dbt deps, build-profiles-dir, and sleep infinity
RUN dbt deps && dbt init && sleep infinity
# Define the entrypoint for the dbt command
ENTRYPOINT ["dbt"]
# Build the dbt-postgres image
FROM base as dbt-postgres
# Set the working directory
WORKDIR /usr/app/dbt/
# Install dbt-postgres
RUN python -m pip install --no-cache-dir dbt-postgres==1.8.0
 
services:
  dbt:
   build: .
   container_name: dbt
   command:
     - bash
     - -c
     - |
       echo "############ Launching DBT ############"
       sleep infinity
   restart: unless-stopped
   ports:
     - 8002:8085
   networks:
     - rop-integration_integration
   volumes:
     - ./dbt:/usr/app/dbt:rw
     - dbt_data:/usr/app/dbt
 